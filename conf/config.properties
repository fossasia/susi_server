# this is the message server configuration file

# to customize these settings place a file 'customized_config.properties' to
# the path data/settings/

# link to this installation. 
# used for e.g. verification emails
host.url=http://localhost:4000

# allow public signup (false, email, admin, true)
# admin means the admin has to enable the account
# email means a validation email will be send to the user
users.public.signup=true

# Regular expression for passwords (warning: has to be a valid java string, escape characters need to be double escaped e.g. \\d instead of \d
# Require user passwords to have atleast 8 characters and atleast one special character, one number and one capital letter.
users.password.regex=^((?=.*\\d)(?=.*[A-Z])(?=.*\\W).{8,64})$
users.password.regex.tooltip=Enter a combination of atleast 8 characters and atleast one special character, one number and text characters

# Regualar express for username to have 5-51 characters
users.username.regex=^(.{5,51})$
users.username.regex.tooltip=Enter atleast 5 character, upto 51 character

# Set all servlets requiring ADMIN UserRole to be only accessible from localhost
users.admin.localonly=false

# SMTP host
smtp.host.name=smtp.gmail.com

# SMTP connection encryption and corresponding port (none/25, starttls/587 or tls/465). in unusual cases, different ports may be used.
smtp.host.encryption=tls
smtp.host.port=465

# SMTP sender displayname (the name displayed to the recipient), email, username (to login) and password. Usually email and username are the same (but not necessarily)
smtp.sender.displayname=Admin
smtp.sender.email=server@loklak.org
smtp.sender.username=server@loklak.org
smtp.sender.password=randomxyz

mail.sendgridtoken=''
mail.frontendurl=https://susi.ai

# SMTP emailing switch (for password recovery and signup verification etc)
mail.type=SMTP

# disable certificate checking for SMTP. turn on when the server uses a self-signed certificate
smtp.trustselfsignedcerts=true

# the ports for the user front-end
port.http=4000
port.https=4443

# allow TLS connections with invalid certificates (none/peers/all)
# all is usefull behind a ssl proxy
# peers includes backend
httpsclient.trustselfsignedcerts=all

# require http auth (true/false)
http.auth=false

# enable https connections (off/on/redirect/only)
# 'redirect' forwards request to http port to https
# 'only' deactivates http port, only listening on https port
https.mode=true
# use java keystore directly or have your key and cert files automatically converted
# (keystore/key-cert)
https.keysource=keystore

# the keystore for the https socket was generated with
# keytool -genkey -alias sitename -keyalg RSA -keystore keystore.jks -keysize 2048
# to make your own keystore,run the command again,enter a different password
# and set the password here
keystore.name=keystore.jks
keystore.password=123456

#amazon API settings
aws_secret_key=randomxyz
aws_associate_tag=randomxyz
aws_access_key_id=randomxyz

# ssl-key in common pem format
https.key=/etc/ssl/private/loklak_key.pem
# if you need intermediate certificates, just combine all certs into one file, just like for nginx
https.cert=/etc/ssl/certs/loklak_cert_full_chain.pem


www.path = html
www.expires = 600

# the extra localhost list (separated by ',') for host which shall be considered to be localhost as well
# these hosts get extra access rights
server.localhost=

# define a server blacklist according to jettys blacklist definition:
server.blacklist=

# memory allocation
Xmx=300m

# a loklak instance can upgrade itself, by default every 24 hours
# if an automatic update is not wanted, set this to i.e. ten years
upgradeInterval = 86400000

# settings to prevent DoS
DoS.blackout = 0
DoS.servicereduction = 0

# using a wolframalpha id it is possible to integrate answers from wolframalpha.
wolframalpha.appid = xxx

# for Susi dreams, we can use an etherpad
etherpad.apikey = secret
etherpad.urlstub = http://dream.susi.ai


# To push the skills to SUSI-Skill-DATA
github.username = username
github.password = password

# the skill repository can be updated regularly, as well as pushing updates
# upstream. To disable this behavior , set the following variable to false.
skill_repo.enable = true
#To pull skill data timer in milliseconds
skill_repo.pull_delay = 60000
skill_repo.admin_email = server@loklak.org

# properties for offline mode. There are several things to consider here:
# - we can use a local susi but client applications on the same host as susi may use speech-to-text online.
#   Therefore we an consider that the host is still online while susi is installed locally.
# - we can omit the usage of console rules and therefore stay quite to the outside, if wanted
# - we can use an online-version of susi as fail-over as a redundancy and to get latest features of the online susi

# if mode = true then all other attributes apply; if mode = false all other attributes default to online versions
local.mode = false

# if useOnlineSusi = true then in offline mode an online susi (api.susi.ai) is requested in case that we
# don't be able to create a local answer. This essentially means that a new catch-all rule for this is created on the fly.
local.useOnlineSusi = false

# if suppressConsole = true then an offline susi will not perform with console rules, therefore does not make calls to the internet at all
local.suppressConsole = false

# authentication only if local version is online to align with online version
local.alignAccount = false

# open browser after startup automatically
local.openBrowser.enable = true
